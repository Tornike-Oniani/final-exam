@using FinalExam.Client.Services.ProductService
@inject IProductService ProductService
@implements IDisposable

<h3>ProductList</h3>

@if(ProductService.Products == null || ProductService.Products.Count == 0)
{
	<span>Loading Products...</span>
}
else
{	
	<ul class="list-unstyled">
		@foreach(var product in ProductService.Products)
		{
			<li class="media my-3">
				<div class="media-img-wrapper mr-2">
					<a href="/product/@product.Id">
						<img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
					</a>
				</div>
				<div class="media-body">
					<a href="/product/@product.Id">
						<h4 class="mb-0">@product.Title</h4>
					</a>
					<p>@product.Description</p>
					<h5 class="price">
						@GetPriceText(product)
					</h5>
				</div>
			</li>
		}
	</ul>
}

@code {
	private static List<ProductViewModel> Products = new List<ProductViewModel>();

	protected override void OnInitialized()
	{
		// Rerender if the products have been changed
		ProductService.ProductsChanged += StateHasChanged;
	}

	public void Dispose()
	{
		ProductService.ProductsChanged -= StateHasChanged;
	}

	private string GetPriceText(ProductViewModel product)
	{
		var variants = product.Variants;
		if (variants.Count == 0)
			return String.Empty;
		else if (variants.Count == 1)
			return $"${variants[0].Price}";

		decimal minPrice = variants.Min(v => v.Price);
		return $"Starting at ${minPrice}";
	}
}
